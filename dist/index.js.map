{"version":3,"sources":["../src/index.js"],"names":["defaultConvertOptions","fontFamilies","convertRawToHTML","rawContent","options","contentState","error","console","warn","convertHTMLToRaw","HTMLString","convertEditorStateToHTML","editorState","getCurrentContent","convertHTMLToEditorState","editorDecorators","createWithContent","createEmpty","convertEditorStateToRaw","convertRawToEditorState"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,wBAAwB;AAC5BC;AAD4B,CAA9B;;AAIO,IAAMC,8CAAmB,SAAnBA,gBAAmB,CAACC,UAAD,EAAaC,OAAb,EAAyB;;AAEvDA,yBAAeJ,qBAAf,EAAyCI,OAAzC;;AAEA,MAAI;AACF,QAAMC,eAAe,6BAAeF,UAAf,CAArB;AACAC,YAAQC,YAAR,GAAuBA,YAAvB;AACA,WAAO,iCAAc,8BAAgBD,OAAhB,CAAd,EAAwCC,YAAxC,CAAP;AACD,GAJD,CAIE,OAAOC,KAAP,EAAc;AACdC,YAAQC,IAAR,CAAaF,KAAb;AACA,WAAO,EAAP;AACD;AAEF,CAbM;;AAeA,IAAMG,8CAAmB,SAAnBA,gBAAmB,CAACC,UAAD,EAAaN,OAAb,EAAyB;;AAEvDA,yBAAeJ,qBAAf,EAAyCI,OAAzC;;AAEA,MAAI;AACF,QAAMC,eAAe,mCAAgB,gCAAkBD,OAAlB,CAAhB,EAA4CM,UAA5C,CAArB;AACA,WAAO,2BAAaL,YAAb,CAAP;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACdC,YAAQC,IAAR,CAAaF,KAAb;AACA,WAAO,EAAP;AACD;AAEF,CAZM;;AAcA,IAAMK,8DAA2B,SAA3BA,wBAA2B,CAACC,WAAD,EAAcR,OAAd,EAA0B;;AAEhEA,yBAAeJ,qBAAf,EAAyCI,OAAzC;;AAEA,MAAI;AACF,QAAMC,eAAeO,YAAYC,iBAAZ,EAArB;AACAT,YAAQC,YAAR,GAAuBA,YAAvB;AACA,WAAO,iCAAc,8BAAgBD,OAAhB,CAAd,EAAwCC,YAAxC,CAAP;AACD,GAJD,CAIE,OAAOC,KAAP,EAAc;AACdC,YAAQC,IAAR,CAAaF,KAAb;AACA,WAAO,EAAP;AACD;AAEF,CAbM;;AAeA,IAAMQ,8DAA2B,SAA3BA,wBAA2B,CAACJ,UAAD,EAAaK,gBAAb,EAA+BX,OAA/B,EAA2C;;AAEjFA,yBAAeJ,qBAAf,EAAyCI,OAAzC;;AAEA,MAAI;AACF,WAAO,qBAAYY,iBAAZ,CAA8B,mCAAgB,gCAAkBZ,OAAlB,CAAhB,EAA4CM,UAA5C,CAA9B,EAAuFK,gBAAvF,CAAP;AACD,GAFD,CAEE,OAAOT,KAAP,EAAc;AACdC,YAAQC,IAAR,CAAaF,KAAb;AACA,WAAO,qBAAYW,WAAZ,CAAwBF,gBAAxB,CAAP;AACD;AAEF,CAXM;;AAaA,IAAMG,4DAA0B,SAA1BA,uBAA0B,CAACN,WAAD,EAAiB;AACtD,SAAO,2BAAaA,YAAYC,iBAAZ,EAAb,CAAP;AACD,CAFM;;AAIA,IAAMM,4DAA0B,SAA1BA,uBAA0B,CAAChB,UAAD,EAAaY,gBAAb,EAAkC;;AAEvE,MAAI;AACF,WAAO,qBAAYC,iBAAZ,CAA8B,6BAAeb,UAAf,CAA9B,EAA0DY,gBAA1D,CAAP;AACD,GAFD,CAEE,OAAOT,KAAP,EAAc;AACdC,YAAQC,IAAR,CAAaF,KAAb;AACA,WAAO,qBAAYW,WAAZ,CAAwBF,gBAAxB,CAAP;AACD;AAEF,CATM","file":"index.js","sourcesContent":["import { convertToHTML, convertFromHTML } from 'draft-convert'\nimport { getToHTMLConfig, getFromHTMLConfig, defaultFontFamilies } from './configs'\nimport { convertFromRaw, convertToRaw, EditorState } from 'draft-js'\n\nconst defaultConvertOptions = {\n  fontFamilies: defaultFontFamilies\n}\n\nexport const convertRawToHTML = (rawContent, options) => {\n\n  options = { ...defaultConvertOptions, ...options }\n\n  try {\n    const contentState = convertFromRaw(rawContent)\n    options.contentState = contentState\n    return convertToHTML(getToHTMLConfig(options))(contentState)\n  } catch (error) {\n    console.warn(error)\n    return ''\n  }\n\n}\n\nexport const convertHTMLToRaw = (HTMLString, options) => {\n\n  options = { ...defaultConvertOptions, ...options }\n\n  try {\n    const contentState = convertFromHTML(getFromHTMLConfig(options))(HTMLString)\n    return convertToRaw(contentState)\n  } catch (error) {\n    console.warn(error)\n    return {}\n  }\n\n}\n\nexport const convertEditorStateToHTML = (editorState, options) => {\n\n  options = { ...defaultConvertOptions, ...options }\n\n  try {\n    const contentState = editorState.getCurrentContent()\n    options.contentState = contentState\n    return convertToHTML(getToHTMLConfig(options))(contentState)\n  } catch (error) {\n    console.warn(error)\n    return ''\n  }\n\n}\n\nexport const convertHTMLToEditorState = (HTMLString, editorDecorators, options) => {\n\n  options = { ...defaultConvertOptions, ...options }\n\n  try {\n    return EditorState.createWithContent(convertFromHTML(getFromHTMLConfig(options))(HTMLString), editorDecorators)\n  } catch (error) {\n    console.warn(error)\n    return EditorState.createEmpty(editorDecorators)\n  }\n\n}\n\nexport const convertEditorStateToRaw = (editorState) => {\n  return convertToRaw(editorState.getCurrentContent())\n}\n\nexport const convertRawToEditorState = (rawContent, editorDecorators) => {\n\n  try {\n    return EditorState.createWithContent(convertFromRaw(rawContent), editorDecorators)\n  } catch (error) {\n    console.warn(error)\n    return EditorState.createEmpty(editorDecorators)\n  }\n \n}"]}